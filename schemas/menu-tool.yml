openapi: 3.0.0
info:
  title: Glovo menu API
  description: ''
  version: 1.0.0
servers:
  - url: https://menu-tool.glovoapp.com/partners-api/api
tags:
  - name: options
    description: Additional options that could be added to the product. Options are not required
  - name: products
    description: Product data related to the store. Product group is lower categorization of a Glovo menu
  - name: collections
    description: Main categorization of a Glovo menu. It is mandatory to have at least one collection in your menu.
  - name: super collections
    description: Uppermost categorization of a Glovo menu. Super collections are not required. If at least one exists, a list of all the super collections is displayed to customers when they open a store in the app. Otherwise, the collection is displayed as the uppermost categorization.
  - name: orders
    description: Update order status / products
  - name: schedule
    description: working schedule of specific store
  - name: spots
    description: Pos terminals integration via poster
paths:
  /options/{storeAddressId}:
    get:
      tags:
        - options
      summary: get all options by group
      description: |
        Get all options by groups. Each option group can have a minimum and maximum of choices for the customer. It is not mandatory for a product to have option. Each option could have a different price impact. Examples of attribute groups could include: Sauces, Drinks, etc
      operationId: optionsGet
      parameters:
        - name: storeAddressId
          in: path
          description: Unique identifier of the store
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OptionGroup'
    patch:
      tags:
        - options
      summary: update options
      description: |
        Allows you to perform a partial update over an option. Only the options sent in the request will be updated.
      operationId: optionsPatch
      parameters:
        - name: storeAddressId
          in: path
          description: Unique identifier of the store
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/OptionGroup'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OptionGroup'
        '204':
          description: No Content
        '422':
          description: Unprocessable Content
  /options/{storeAddressId}/{groupId}:
    delete:
      tags:
        - options
      summary: delete group of options
      description: |
        Allows you to delete group of options.
      operationId: optionGroupDelete
      parameters:
        - name: storeAddressId
          in: path
          description: Unique identifier of the store
          required: true
          schema:
            type: string
        - name: groupId
          in: path
          description: Unique identifier of the option group
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OptionGroup'
        '204':
          description: No Content
  /options/{storeAddressId}/{groupId}/{optionId}:
    delete:
      tags:
        - options
      summary: delete option
      description: |
        Allows you to delete option by id.
      operationId: optionDelete
      parameters:
        - name: storeAddressId
          in: path
          description: Unique identifier of the store
          required: true
          schema:
            type: string
        - name: groupId
          in: path
          description: Unique identifier of the option group
          required: true
          schema:
            type: string
        - name: optionId
          in: path
          description: Unique identifier of the option
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Option'
        '204':
          description: No Content
  /products/{storeAddressId}:
    get:
      tags:
        - products
      summary: get all products
      description: |
        Allows you to get products by groups. Represents a physical product in a store, although we give stores flexibility to configure what they want to offer as products. Each product belongs in a section.
      operationId: productsGet
      parameters:
        - name: storeAddressId
          in: path
          description: Unique identifier of the store
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductGroup'
    patch:
      tags:
        - products
      summary: edit products
      description: |
        Allow you to edit product parameters
      operationId: productsPatch
      parameters:
        - name: storeAddressId
          in: path
          description: Unique identifier of the store
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProductGroup'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductGroup'
        '204':
          description: No Content
        '422':
          description: Unprocessable Content
  /products/{storeAddressId}/modify:
    patch:
      tags:
        - products
      summary: edit one product
      description: |
        This method only edits price and availability for one product
      operationId: productsModify
      parameters:
        - name: storeAddressId
          in: path
          description: Unique identifier of the store
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProductGroup'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
        '204':
          description: No Content
        '422':
          description: Unprocessable Content
  /products/{storeAddressId}/{groupId}:
    delete:
      tags:
        - products
      summary: delete group of products
      description: |
        Allow you to delete group of products
      operationId: productGroupDelete
      parameters:
        - name: storeAddressId
          in: path
          description: Unique identifier of the store
          required: true
          schema:
            type: string
        - name: groupId
          in: path
          description: Unique identifier of the product group
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductGroup'
        '204':
          description: No Content
  /products/{storeAddressId}/{groupId}/{productId}:
    delete:
      tags:
        - products
      summary: delete product
      description: |
        Allow you to delete product by id
      operationId: productDelete
      parameters:
        - name: storeAddressId
          in: path
          description: Unique identifier of the store
          required: true
          schema:
            type: string
        - name: groupId
          in: path
          description: Unique identifier of the product group
          required: true
          schema:
            type: string
        - name: productId
          in: path
          description: Unique identifier of the product
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '204':
          description: No Content
  /menu-collections/{storeAddressId}:
    get:
      tags:
        - collections
      summary: get Collections
      description: |
        Allow you to get collections
      operationId: CollectionsGet
      parameters:
        - name: storeAddressId
          in: path
          description: Unique identifier of the store
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collections'
    patch:
      tags:
        - collections
      summary: edit collections
      description: |
        Allow you to edit collections
      operationId: collectionsPatch
      parameters:
        - name: storeAddressId
          in: path
          description: Unique identifier of the store
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Collections'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collections'
        '204':
          description: No Content
        '422':
          description: Unprocessable Content
  /menu-collections/{storeAddressId}/{collectionId}:
    delete:
      tags:
        - collections
      summary: delete Collection
      description: |
        Allow you to delete coollection by id
        * CollectionId parameter is optional
        * Deleting a collection and all related entities by collectionId
        * Deleting only collections by storeAddressId
      operationId: CollectionDelete
      parameters:
        - name: storeAddressId
          in: path
          description: Unique identifier of the store
          required: true
          schema:
            type: string
        - name: collectionId
          in: path
          description: Unique identifier of the store
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collections'
        '204':
          description: No Content
  /menu-supercollections/{storeAddressId}:
    get:
      tags:
        - super collections
      summary: get all supper collections
      description: |
        Allow you to get Super Collections.
      operationId: SuperCollectionsGet
      parameters:
        - name: storeAddressId
          in: path
          description: Unique identifier of the store
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SuperCollections'
    patch:
      tags:
        - super collections
      summary: edit Supper Collection
      description: |
        Allow you to edit Super Collections
      operationId: superCollectionsPatch
      parameters:
        - name: storeAddressId
          in: path
          description: Unique identifier of the store
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SuperCollections'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SuperCollections'
        '204':
          description: No Content
        '422':
          description: Unprocessable Content
  /menu-supercollections/{storeAddressId}/{superCollectionId}:
    delete:
      tags:
        - super collections
      summary: delete Super Collection
      description: >
        * superCollectionId parameter is optional

        * Deleting a superCollection and all related entities by
        superCollectionId

        * Deleting only superCollection by storeAddressId
      operationId: SuperCollectionDelete
      parameters:
        - name: storeAddressId
          in: path
          description: Unique identifier of the store
          required: true
          schema:
            type: string
        - name: superCollectionId
          in: path
          description: Unique identifier of the store
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SuperCollections'
        '204':
          description: No Content
  /orders/status/{storeAddressId}:
    put:
      tags:
        - orders
      summary: update order status
      description: |
        Allows the update of the order status during different stages of the preparation.

        "ACCEPTED": The order has been accepted by the store. Be aware that if you don't accept the order we will still move forward with the order, as we don't require an acceptance to proceed.

        "READY_FOR_PICKUP": The order is ready to be picked up by a courier or the customer (Only available for orders delivered by Glovo couriers)

        "OUT_FOR_DELIVERY": The courier has collected the order in the store and is now being delivered to the customer (Only available for Marketplace orders)
      operationId: orderUpdateStatus
      parameters:
        - name: storeAddressId
          in: path
          description: Unique identifier of the store
          required: true
          schema:
            type: string
        - name: Status List
          in: query
          description: select value of Status List
          required: true
          schema:
            type: string
            enum:
              - ACCEPTED
              - READY_FOR_PICKUP
              - OUT_FOR_DELIVERY
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: ACCEPTED
                orderId:
                  type: string
                  example: MQ123123
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request
  /schedule/{storeAddressId}:
    get:
      tags:
        - schedule
      summary: get schedule of work
      description: |
        get schedule by store id
      operationId: ScheduleGet
      parameters:
        - name: storeAddressId
          in: path
          description: Unique identifier of the store
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  timezone:
                    type: string
                  schedule:
                    type: array
                    items:
                      type: object
                      properties:
                        day_of_week:
                          type: integer
                        time_slots:
                          type: array
                          items:
                            type: object
                            properties:
                              opening:
                                type: string
                              closing:
                                type: string
        '400':
          description: bad request
  /schedule/{storeAddressId}/closing:
    get:
      tags:
        - schedule
      summary: Get active temporary closing
      description: |
        Get active temporary closing
      operationId: ScheduleClosingGet
      parameters:
        - name: storeAddressId
          in: path
          description: Unique identifier of the store
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  timezone:
                    type: string
                  schedule:
                    type: array
                    items:
                      type: object
                      properties:
                        day_of_week:
                          type: integer
                        time_slots:
                          type: array
                          items:
                            type: object
                            properties:
                              opening:
                                type: string
                              closing:
                                type: string
        '400':
          description: bad request

    put:
      tags:
        - schedule
      summary: Active temporary closing
      description: |
        Active temporary closing
      operationId: ScheduleClosingPut
      parameters:
        - name: storeAddressId
          in: path
          description: Unique identifier of the store
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                until:
                  type: string
                  required: true
                  example: '2019-12-20T10:00:00+01:00'
                  description: 'Date must be a future'
      responses:
        '200':
          description: Ok
        '400':
          description: bad request
    delete:
      tags:
        - schedule
      summary: Remove temporary closing
      description: |
        Active temporary closing
      operationId: ScheduleClosingDelete
      parameters:
        - name: storeAddressId
          in: path
          description: Unique identifier of the store
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
        '400':
          description: bad request
  /spots/{token}/getAccountNumber/:
    parameters:
      - $ref: '#/components/parameters/tokenUrl'
    get:
      tags:
        - spots
      description: |
        get acount number
      operationId: spotsAccount
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  accountNumber:
                    type: string
                    example: 123
  /spots/{accountNumber}/:
    parameters:
      - $ref: '#/components/parameters/accountNumber'
    get:
      tags:
        - spots
      description: |
        get spots
      operationId: spotsGet
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Spot'
  /spots/{accountNumber}/{spotId}/:
    parameters:
      - $ref: '#/components/parameters/accountNumber'
      - $ref: '#/components/parameters/spotId'
    patch:
      tags:
        - spots
      description: |
        set spot id
      operationId: spotPatch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                storeAddressId:
                  type: string
                  example: 321
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/Spot'
                  - type: object
                    properties:
                      storeAddressId:
                        example: 321
  /spots/{accountNumber}/{spotId}/sendError/:
    parameters:
      - $ref: '#/components/parameters/accountNumber'
      - $ref: '#/components/parameters/spotId'
    post:
      tags:
        - spots
      description: |
        set error about spot
      operationId: spotError
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/Spot'
                  - type: object
                    properties:
                      status:
                        example: PENDING
components:
  parameters:
    accountNumber:
      name: accountNumber
      in: path
      description: account number
      required: true
      schema:
        type: string
    tokenUrl:
      name: token
      in: path
      description: access token
      required: true
      schema:
        type: string
    spotId:
      name: spotId
      in: path
      description: access token
      required: true
      schema:
        type: string
  schemas:
    Option:
      type: object
      properties:
        id:
          type: string
          example: side_1
        title:
          type: string
          example: cheese side
        active:
          type: boolean
          example: true
        price:
          type: number
          example: 30
      description: options for products
    OptionGroup:
      type: object
      properties:
        id:
          type: string
          example: pizzaSides
        title:
          type: string
          example: Choose a side
        active:
          type: boolean
          example: true
          description: Specifies if the option is available to be purchased
        min:
          type: number
          example: 0
          description: Minimum of options a customer can choose from the group
        max:
          type: number
          example: 1
          description: Maximum of options a customer can choose from the group
        moreThanOnce:
          type: boolean
          description: Indecates if the customer can choose more than option from the group
        items:
          type: array
          items:
            $ref: '#/components/schemas/Option'
      description: group of options
    Product:
      type: object
      properties:
        id:
          type: string
          example: pizza_1
        title:
          type: string
          example: Margherita
        active:
          type: boolean
          example: true
        description:
          type: string
          example: pizza with tomato paste, mozzarella, tomatos and basilicum
        price:
          type: number
          example: 220
        hitSales:
          type: boolean
          example: true
          description: show if availiable to sale
        image:
          type: string
          example: https://glovoapp.com/images/logo_green.svg
          description: Url of the main product image. Must use HTTPS protocol.
        position:
          type: integer
          example: 0
          description: Relative position of the product in the product group

        options:
          type: array
          items:
            type: string
          description: array of option group ids
      description: product
    ProductGroup:
      type: object
      properties:
        id:
          type: string
          example: 34291522
        title:
          type: string
          example: Pizzas
          description: Product group name
        active:
          type: boolean
        position:
          type: integer
          example: 0
          description: Relative position of the product group in the collection
        items:
          type: array
          items:
            $ref: '#/components/schemas/Product'
      description: group of products
    Collections:
      type: object
      properties:
        id:
          type: string
          example: 23456723
        title:
          type: string
          example: Italian food
          description: Name of Collection
        active:
          type: boolean
          example: true
        position:
          type: integer
          example: 0
          description: position of collections in Super Collection
        image:
          type: string
          example: https://glovoapp.com/images/logo_green.svg
        productGroups:
          type: array
          items:
            type: string
          description: array id of ProductGroups
      description: Collection list
    SuperCollections:
      type: object
      properties:
        id:
          type: string
          example: 9823
        title:
          type: string
          example: European food
        active:
          type: boolean
          example:  true
        position:
          type: integer
          example: 0
          description: position of Super Collections in
        image:
          type: string
          example: https://glovoapp.com/images/logo_green.svg
        menuCollections:
          type: array
          items:
            type: string
          description: array id of MenuCollection
      description: SuperCollection list
    Order:
      type: object
      properties:
        order_id:
          type: string
        store_id:
          type: string
          example: 123456
          description: Your store id
        order_time:
          type: string
          example: 2018-06-08 14:24:53
          description: yyyy-MM-dd HH:mm:ss Local time of the acceptance of the order by Glovo
        estimated_pickup_time:
          type: string
          example: 2018-06-08 14:45:44
          description: Local time of courier's expected arrival at the store
        utc_offset_minutes:
          type: string
          example: 60
          description: Time difference in minutes between UTC and the local time of the store
        payment_method:
          type: string
        currency:
          type: string
        order_code:
          type: string
        allergy_info:
          type: string
        special_requirements:
          type: string
        estimated_total_price:
          type: number
        delivery_fee:
          type: integer
        minimum_basket_surcharge:
          type: integer
        customer_cash_payment_amount:
          type: integer
        courier:
          type: object
          properties:
            name:
              type: string
            phone_number:
              type: string
        customer:
          type: object
          properties:
            name:
              type: string
            hash:
              type: string
            invoicing_details:
              type: object
              properties:
                company_name:
                  type: string
                company_address:
                  type: string
                tax_id:
                  type: string
        products:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              purchased_product_id:
                type: string
              name:
                type: string
              price:
                type: number
              quantity:
                type: integer
              attributes:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    price:
                      type: number
                    quantity:
                      type: integer
        delivery_address:
          type: object
          properties:
            label:
              type: string
            latitude:
              type: number
            longitude:
              type: number
        bundled_orders:
          type: array
          items:
            type: string
        pick_up_code:
          type: string
        is_picked_up_by_customer:
          type: boolean
        cutlery_requested:
          type: boolean
        partner_discounts_products:
          type: integer
        partner_discounted_products_total:
          type: integer
        total_customer_to_pay:
          type: integer
        loyalty_card:
          type: string
      description: Order object
    OrderCancelled:
      type: object
      properties:
        order_id:
          type: string
        store_id:
          type: string
        cancel_reason:
          type: string
        payment_strategy:
          type: string
      description: Order cancelled object
    Spot:
      type: object
      properties:
        id:
          type: string
          example: 123
        name:
          type: string
          example: HOC
        address:
          type: string
          example: вул. Валентинівська, 743, Київ
        storeAddressId:
          type: string
          example: NQ123
        status:
          type: string
          enum:
            - PENDING
            - SUCCESS
            - ERROR
          example: PENDING
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
