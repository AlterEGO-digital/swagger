---
openapi: 3.0.0
info:
  title: Glovo menu API
  description: ''
  version: 1.0.0
tags:
  - name: options
  - name: products
paths:
  /options/:storeAddressId:
    get:
      tags:
      - options
      description: |
        get options by groups
      operationId: optionsGet
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OptionGroup'
    patch:
      tags:
      - options
      description: |
        edit options
      operationId: optionsPatch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/OptionGroup'
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OptionGroup'
        "204":
          description: No Content
        "422":
          description: Unprocessable Content
  /options/:storeAddressId/:groupId:
    delete:
      tags:
      - options
      description: |
        delete group of options.
      operationId: optionGroupDelete
      responses:
        "204":
          description: No Content
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OptionGroup'
  /options/:storeAddressId/:groupId/:optionId:
    delete:
      tags:
      - options
      description: |
        delete option by id.
      operationId: optionDelete
      responses:
        "204":
          description: No Content
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Option'

  /products/:storeAddressId:
    get:
      tags:
      - products
      description: |
        get products by groups
      operationId: productsGet
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductGroup'
    patch:
      tags:
      - products
      description: |
        edit products
      operationId: productsPatch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProductGroup'
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductGroup'
        "204":
          description: No Content
        "422":
          description: Unprocessable Content
  /products/:storeAddressId/modify:
    patch:
      tags:
        - products
      description: |
       This method only edits price and availability for one product
      operationId: productPatch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Product'
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        "204":
          description: No Content
        "422":
          description: Unprocessable Content
  /products/:storeAddressId/:groupId:
    delete:
      tags:
      - products
      description: |
        delete group of products
      operationId: productGroupDelete
      responses:
        "204":
          description: No Content
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductGroup'
  /products/:storeAddressId/:groupId/:productId:
    delete:
      tags:
      - products
      description: |
        delete product by id
      operationId: productDelete
      responses:
        "204":
          description: No Content
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /menu-collections/:storeAddressId:
    get:
      tags:
        - collections
      description: |
        get collections
      operationId: CollectionsGet
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collections'
    patch:
      tags:
        - collections
      description: |
        edit collections
      operationId: collectionsPatch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Collections'
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collections'
        "204":
          description: No Content
        "422":
          description: Unprocessable Content
  /menu-collections/:storeAddressId/:collectionId?:
    delete:
      tags:
        - collections
      description: |
        * collectionId parameter is optional
        * Deleting a collection and all related entities by collectionId
        * Deleting only collections by storeAddressId
      operationId: CollectionDelete
      responses:
        "204":
          description: No Content
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collections'

  /orders/status/:storeAddressId:
    put:
      tags:
        - orders
      description: |
        update order status
      operationId: orderUpdateStatus
      parameters:
        - in: query
          name: Status List
          description: "select value of Status List"
          schema:
            type: string
            enum: [ "ACCEPTED", "READY_FOR_PICKUP", "OUT_FOR_DELIVERY" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                orderId:
                  type: string
      responses:
        "200":
          description: Ok
        "400":
          description: 'bad request'

  /schedule/:storeAddressId:
    get:
      tags:
        - schedule
      description: |
        get schedule by store id
      operationId: ScheduleGet
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  timezone:
                    type: string
                  schedule:
                    type: array
                    items:
                      type: object
                      properties:
                        day_of_week:
                          type: integer
                        time_slots:
                          type: array
                          items:
                            type: object
                            properties:
                              opening:
                                type: string
                              closing:
                                type: string
        "400":
          description: 'bad request'

  /spots/{token}/getAccountNumber/:
    parameters:
      - $ref: '#/components/parameters/tokenUrl'
    get:
      tags:
        - spots
      description: |
        get acount number
      operationId: spotsAccount
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  accountNumber:
                    type: string
                    example: 123
  /spots/{accountNumber}/:
    parameters:
      - $ref: '#/components/parameters/accountNumber'
    get:
      tags:
        - spots
      description: |
        get spots
      operationId: spotsGet
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Spot'

  /spots/{accountNumber}/{spotId}/:
    parameters:
      - $ref: '#/components/parameters/accountNumber'
      - $ref: '#/components/parameters/spotId'
    patch:
      tags:
        - spots
      description: |
        set spot id
      operationId: spotPatch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                storeAddressId:
                  type: string
                  example: 321
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/Spot'
                  - type: object
                    properties:
                      storeAddressId:
                        example: 321

  /spots/{accountNumber}/{spotId}/sendError/:
    parameters:
      - $ref: '#/components/parameters/accountNumber'
      - $ref: '#/components/parameters/spotId'
    post:
      tags:
        - spots
      description: |
        set error about spot
      operationId: spotError
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/Spot'
                  - type: object
                    properties:
                      status:
                        example: PENDING


components:
  parameters:
    accountNumber:
      name: accountNumber
      in: path
      description: account number
      required: true
      schema:
        type: string
    tokenUrl:
      name: token
      in: path
      description: access token
      required: true
      schema:
        type: string
    spotId:
      name: spotId
      in: path
      description: access token
      required: true
      schema:
        type: string

  schemas:
    Option:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        active:
          type: boolean
        price:
          type: number
      description: option for products
    OptionGroup:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        active:
          type: boolean
        min:
          type: number
        max:
          type: number
        moreThanOnce:
          type: boolean
        items:
          type: array
          items:
            $ref: '#/components/schemas/Option'
      description: group of options
    Product:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        active:
          type: boolean
        description:
          type: string
        price:
          type: number
        hitSales:
          type: boolean
        image:
          type: string
        position:
          type: integer
        options:
          type: array
          items:
            type: string
          description: array id options
      description: product
    ProductGroup:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        active:
          type: boolean
        position:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/Product'
      description: group of products
    Collections:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        active:
          type: boolean
        position:
          type: integer
        image:
          type: string
        productGroups:
          type: array
          items:
            type: string
          description: array id of ProductGroups

      description: Collection list
    Order:
      type: object
      properties:
        order_id:
          type: string
        store_id:
          type: string
        order_time:
          type: string
        estimated_pickup_time:
          type: string
        utc_offset_minutes:
          type: string
        payment_method:
          type: string
        currency:
          type: string
        order_code:
          type: string
        allergy_info:
          type: string
        special_requirements:
          type: string
        estimated_total_price:
          type: number
        delivery_fee:
          type: integer
        minimum_basket_surcharge:
          type: integer
        customer_cash_payment_amount:
          type: integer
        courier:
          type: object
          properties:
            name:
              type: string
            phone_number:
              type: string
        customer:
          type: object
          properties:
            name:
              type: string
            hash:
              type: string
            invoicing_details:
              type: object
              properties:
                company_name:
                  type: string
                company_address:
                  type: string
                tax_id:
                  type: string
        products:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              purchased_product_id:
                type: string
              name:
                type: string
              price:
                type: number
              quantity:
                type: integer
              attributes:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    price:
                      type: number
                    quantity:
                      type: integer
        delivery_address:
          type: object
          properties:
            label:
              type: string
            latitude:
              type: number
            longitude:
              type: number
        bundled_orders:
          type: array
          items:
            type: string
        pick_up_code:
          type: string
        is_picked_up_by_customer:
          type: boolean
        cutlery_requested:
          type: boolean
        partner_discounts_products:
          type: integer
        partner_discounted_products_total:
          type: integer
        total_customer_to_pay:
          type: integer
        loyalty_card:
          type: string
      description: Order object
    OrderCancelled:
      type: object
      properties:
        order_id:
          type: string
        store_id:
          type: string
        cancel_reason:
          type: string
        payment_strategy:
          type: string
      description: Order cancelled object

    Spot:
      type: object
      properties:
        id:
          type: string
          example: 123
        name:
          type: string
          example: HOC
        address:
          type: string
          example: вул. Валентинівська, 743, Київ
        storeAddressId:
          type: string
          example: 123
        status:
          type: string
          enum: ["PENDING", "SUCCESS", "ERROR"]
          example: PENDING

